{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Mex Technical Documentation","text":"<p>This site contains the L'Or\u00e9al Mex Technical Documentation of all our products.</p>"},{"location":"#team","title":"Team","text":"Member Role GitHub User Nickname Gustavo Pardo Team Lead gustavopardoloreal Gucci Renata Ramos Data Scientist renataramosm Reni Sonia Mancera Data Scientist soniamanceracsa Sonchis Karina Vel\u00e1zquez Data Scientist kari-vlzqz Kari Miguel Casta\u00f1eda Data Scientist maCastanedaCSA Migue"},{"location":"#documentation-resources","title":"Documentation Resources","text":"<ul> <li>General</li> <li>Docs Template</li> </ul>"},{"location":"#references","title":"References","text":"<p>Usefull 3rd party documentation:</p> <ul> <li>MkDocs</li> <li>MkDocs - Docmark and Extensions</li> </ul>"},{"location":"docs-template/api/","title":"Documentation Template","text":""},{"location":"docs-template/api/#api","title":"API","text":"<p>Include if proyect consumes or generates an API</p>"},{"location":"docs-template/architecture/","title":"Documentation Template","text":""},{"location":"docs-template/architecture/#architecture","title":"Architecture","text":"<p>Include everything regarding architecture:</p> <ul> <li>Design spechs</li> <li>Diagrams</li> <li>Workflows</li> <li>Frameworks</li> </ul>"},{"location":"docs-template/deployment/","title":"Documentation Template","text":""},{"location":"docs-template/deployment/#deployment","title":"Deployment","text":"<p>Describe deployment to production methodology.</p>"},{"location":"docs-template/intro/","title":"Documentation Template","text":""},{"location":"docs-template/intro/#introduction","title":"Introduction","text":"<p>A friendly introduction to the proyect</p>"},{"location":"general/coding-standards/","title":"Coding Standards","text":"<p>This section is ment to describe the L'Or\u00e9al Mex Data Science Team coding standards.</p>"},{"location":"general/coding-standards/#we-use-python","title":"We use Python...","text":"<p>So we strongly encourage you to dive deep into the zen of python. In case you're not familiar with it, we kindly list it for you so you don't miss it:</p> <p>The Zen of Python, by Tim Peters</p> <ol> <li>Beautiful is better than ugly.</li> <li>Explicit is better than implicit.</li> <li>Simple is better than complex.</li> <li>Complex is better than complicated.</li> <li>Flat is better than nested.</li> <li>Sparse is better than dense.</li> <li>Readability counts.</li> <li>Special cases aren't special enough to break the rules.</li> <li>Although practicality beats purity.</li> <li>Errors should never pass silently.</li> <li>Unless explicitly silenced.</li> <li>In the face of ambiguity, refuse the temptation to guess.</li> <li>There should be one --and preferably only one-- obvious way to do it.</li> <li>Although that way may not be obvious at first unless you're Dutch.</li> <li>Now is better than never.</li> <li>Although never is often better than right now.</li> <li>If the implementation is hard to explain, it's a bad idea.</li> <li>If the implementation is easy to explain, it may be a good idea.</li> <li>Namespaces are one honking great idea -- let's do more of those!</li> </ol> <p>Info</p> <p>You can always summon the zen of python with <code>import this</code> within a python script.</p>"},{"location":"general/coding-standards/#data-transformations","title":"Data transformations","text":"<p>Spoiler alert in case you're new to this gorgeous monster called Data Science, you're going to be dealing with multiple datasets, joining tables, perfoming data transformations, APIs, and in the particular case of L'Or\u00e9al, data cleaning... TONS OF IT.</p> <p>For this reason, as the 7\u00b0 point of the zen of python suggests, readability counts.</p>"},{"location":"general/coding-standards/#method-concatenation","title":"Method Concatenation","text":"<p>Avoid performing multiple data trasnformations in several steps unless you need to explicitly store the results in memory.</p> <p>Note</p> <p>In all following cases, the output dataframe is the same but the method concatenation style is more efficient handling memory and reads as an ordered sequence of transformations.</p>"},{"location":"general/coding-standards/#pandas","title":"Pandas","text":"<p>Given the example dataframe:</p> category units A 1 A 2 B 3 B 4 C 5 C 6 <p>Unclean common usage:</p> <pre><code>df_group = df.groupby('category').agg(sum_units=('units', 'sum'))\ndf_group['units_squared'] = df_group['sum_units'] ** 2\ndf_group['prop'] = df_group['sum_units'] / df['sum_units'].sum()\n</code></pre> <p>Method Concatenation:</p> <pre><code>df_group = (\n    df\n    .groupby('category')\n    .agg(\n        sum_units = ('units', 'sum'))\n    .assign(\n        units_squared = lambda df: df.sum_units ** 2,\n        prop          = lambda df: df.sum_units / df.units_squared.sum()))\n</code></pre>"},{"location":"general/tools/","title":"Tools","text":"<p>This section is a collection of the current tools used by the L'Or\u00e9al Mex Data Science Team.</p>"},{"location":"general/tools/#drawio","title":"Drawio","text":"<p>Tip</p> <p>Use <code>drawio</code> for complex diagrams.</p> <p>Drawio is a free online diagrams tool that supports a wide range of diagrams with its extensive shape libraries. It allows to create diagrams with point and click functionalities.</p> <p>It is the primary tool for diagramming due to its built-in integration with several storage locations (GitHub in particular), which allows you to edit any diagram straight out from the storage source. For example:</p> <ul> <li>GitHub</li> <li>OneDrive</li> <li>Local device</li> </ul> <p>It is extremly useful to integrate cloud icons into a diagram, such as:</p> <ul> <li>Databricks</li> <li>Amazon Web Services</li> <li>Google Cloud Storage</li> <li>Microsoft Azure</li> </ul> <p>And it allows you to export a diagram to common image formats like JPEG or PNG.</p>"},{"location":"general/tools/#mermaid","title":"Mermaid","text":"<p>Tip</p> <p>Use <code>mermaid</code> functionalities for markdown in-file diagrams. Avoid usage for more complex visualizations.</p> <p>Mermaid lets you create diagrams and visualizations using text and code. It counts with a live editor so you can design a graph before its inclusion to the documentation.</p> <p>It is particularly usefull for its plugin functionalities to markdown files, for example:</p> <pre><code>graph LR\n    MyDAG --&gt; Directed\n    Directed --&gt; Acyclic\n    Acyclic --&gt; Graph\n    Graph --&gt; Directed\n</code></pre> <pre><code>graph LR\n    MyDAG --&gt; Directed\n    Directed --&gt; Acyclic\n    Acyclic --&gt; Graph\n    Graph --&gt; Directed\n</code></pre> <p>Or more advanced charts:</p> <pre><code>gantt\n    apple   :a, 2017-07-20, 1w\n    banana  :crit, b, 2017-07-23, 3d\n    cherry  :active, c, after b a, 2d\n    kiwi    :d, after c, 1d\n</code></pre> <pre><code>gantt\n    apple   :a, 2017-07-20, 1w\n    banana  :crit, b, 2017-07-23, 3d\n    cherry  :active, c, after b a, 2d\n    kiwi    :d, after c, 1d\n</code></pre>"}]}